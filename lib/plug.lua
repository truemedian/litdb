local class = require('./class')
local ini = require('./ini')
local JSON = require('json')

ini.config({
  separator = '=',
  comment = '#',
  trim = true,
  lowercase = true,
  escape = false
})

local process = require('./process')

-- Plug class

local Plug = class(function(this, ptype)
   -- Compiler configuration
   this.compiler = {}

   if not ptype or ptype == nil then
      error('Expected type, got nil.')
      os.exit(1)
   else
      this.type = ptype
      local plugfile = ini.parse_file('Plugfile')
      
      if plugfile then
         this.compiler.minify = plugfile.compiler.minify or 'false'
         this.compiler.minify_message = plugfile.compiler.minify_message or 'Auto generated by Plug. Compilation date: ' .. os.date('%X %x') .. '.' or this.compiler.minify_mesage
      end
   end
end)

-- Plug functions

function Plug.UUID()
   return require('luv4').gen()
end

function Plug.is(description)
   return description.__type or description.name or description.type
end

-- Plug methods

function Plug:describe(filename, desc, test)
   desc = desc(self.type.constants)

   if test then
      return {
         __filename = filename,
         __type = self.type.name,
         __author = self.type.author,
         __result = process(self.type.template, desc, self.type.defaults, self.type.static)
      }
   else
      local file = io.open(filename .. '.' .. self.type.name .. '.json', 'w')
      
      if self.compiler.minify == 'true' or self.compiler.minify == true then
         local curTemplate = JSON.decode(process(self.type.template, desc, self.type.defaults, self.type.static))
         curTemplate['//'] = self.compiler.minify_message
         file:write(JSON.encode(curTemplate))
      else
         file:write(process(self.type.template, desc, self.type.defaults, self.type.static))
      end
      
      file:close()
      
      return {
         __filename = filename,
         __type = self.type.name,
         __author = self.type.author,
         __result = process(self.type.template, desc, self.type.defaults, self.type.static)
      }
   end
end

return Plug
